!/************************************************************************************************
!    Even Fibonacci numbers
!   Problem 2
!
!    Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
!    By starting with 1 and 2, the first 10 terms will be:
!
!            1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
!
!    By considering the terms in the Fibonacci sequence whose values do not exceed four million, 
!    find the  sum of the even-valued terms. (4613732)
!    
!**************************************************************************************************/
FUNCTION  fibonacci(term) result(a)
    implicit NONE
    INTEGER(kind=8), intent(in) :: term
    integer(kind=8) :: a, b, fibbo =0, i;
    a=1; b=1;

    do i=1, term
        fibbo = a + b; 
        a = b; 
        b = fibbo; 
    end do
   
end function fibonacci

FUNCTION is_even(num) result(isBool)
    implicit NONE
    INTEGER(kind=8), intent(in) :: num;
    logical :: isBool;
    isBool = .FALSE.

    if (  mod(num,2) .eq. 0 ) then 
        isBool = .TRUE.  
    end if

end function is_even

program euler_001
    implicit none;
    integer(kind=8):: lim = 4000000;
    integer(kind=8):: sum =0, term=0, i=0, fibonacci
    logical is_even;

    do i=1, lim-1
        term = fibonacci(i);
        if (term > lim) then 
            exit;
        end if

        if (is_even(term) .eqv. .TRUE.) then 
            sum = sum + term;
            ! print *, "i=",i,"term = ", term 
        end if
    end do

    print *, "The sum of even fibbonacci terms < ",lim, " is ", sum;
    
end program euler_001
